---
- name: Load Configuration
  hosts: localhost
  gather_facts: no
  connection: local

  tasks:
    - name: Load configuration file
      ansible.builtin.include_vars:
        file: "{{ playbook_dir }}/config.yml"
        name: config

    - name: Validate configuration
      ansible.builtin.assert:
        that:
          - config.backup_repo.remote_url is defined
          - config.backup_repo.remote_url != ""
        fail_msg: "Please configure backup_repo.remote_url in config.yml"

    - name: Set global facts from config
      ansible.builtin.set_fact:
        backup_dir: "{{ config.backup_repo.local_path }}"
        backup_remote_url: "{{ config.backup_repo.remote_url }}"
        backup_branch: "{{ config.backup_repo.branch | default('main') }}"
        git_user_name: "{{ config.backup_repo.git_user.name }}"
        git_user_email: "{{ config.backup_repo.git_user.email }}"
        ssh_private_key: "{{ config.ssh.private_key | expanduser }}"
        ssh_port: "{{ config.ssh.port | default(22) }}"
        email_alerts_enabled: "{{ config.email_alerts.enabled | default(false) }}"
        notify_on_change: "{{ config.email_alerts.notify_on_change | default(true) if config.email_alerts is defined and config.email_alerts.enabled | default(false) else false }}"
      delegate_to: localhost
      delegate_facts: true

- name: Backup MikroTik Router Configurations
  hosts: mikrotik_routers
  gather_facts: no

  vars:
    backup_dir: "{{ hostvars['localhost']['backup_dir'] }}"

  tasks:
    - name: Override SSH settings from config
      ansible.builtin.set_fact:
        ansible_ssh_private_key_file: "{{ hostvars['localhost']['ssh_private_key'] }}"
        ansible_port: "{{ hostvars['localhost']['ssh_port'] }}"

    - name: Get current timestamp
      ansible.builtin.set_fact:
        backup_timestamp: "{{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}"
      delegate_to: localhost
      run_once: true

    - name: Ensure backup directory exists
      ansible.builtin.file:
        path: "{{ backup_dir }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      run_once: true

    - name: Export router configuration
      community.routeros.command:
        commands:
          - /export compact
      register: config_output

    - name: Save configuration to local file (overwrite for git versioning)
      ansible.builtin.copy:
        content: "# Router: {{ inventory_hostname }}\n# Host: {{ ansible_host }}\n# Last backup: {{ backup_timestamp }}\n\n{{ config_output.stdout[0] }}"
        dest: "{{ backup_dir }}/{{ backup_filename | default(inventory_hostname) }}.rsc"
        mode: '0644'
      delegate_to: localhost

- name: Initialize and Manage Git Repository
  hosts: localhost
  gather_facts: yes
  connection: local

  vars:
    backup_dir: "{{ hostvars['localhost']['backup_dir'] }}"
    backup_remote_url: "{{ hostvars['localhost']['backup_remote_url'] }}"
    backup_branch: "{{ hostvars['localhost']['backup_branch'] }}"
    git_user_name: "{{ hostvars['localhost']['git_user_name'] }}"
    git_user_email: "{{ hostvars['localhost']['git_user_email'] }}"
    git_commit_message: "Automated backup - {{ ansible_date_time.date }} {{ ansible_date_time.time }}"

  tasks:
    - name: Ensure backup directory exists
      ansible.builtin.file:
        path: "{{ backup_dir }}"
        state: directory
        mode: '0755'

    - name: Check if backup directory is a git repository
      ansible.builtin.stat:
        path: "{{ backup_dir }}/.git"
      register: git_dir

    - name: Initialize git repository if not exists
      ansible.builtin.command:
        cmd: "git init -b {{ backup_branch }}"
        chdir: "{{ backup_dir }}"
      when: not git_dir.stat.exists

    - name: Get current branch name (for existing repos)
      ansible.builtin.command:
        cmd: git branch --show-current
        chdir: "{{ backup_dir }}"
      register: current_branch
      when: git_dir.stat.exists
      changed_when: false
      failed_when: false

    - name: Switch to correct branch if needed
      ansible.builtin.command:
        cmd: "git checkout -B {{ backup_branch }}"
        chdir: "{{ backup_dir }}"
      when:
        - git_dir.stat.exists
        - current_branch.stdout != backup_branch

    - name: Configure git user name
      ansible.builtin.command:
        cmd: "git config user.name '{{ git_user_name }}'"
        chdir: "{{ backup_dir }}"

    - name: Configure git user email
      ansible.builtin.command:
        cmd: "git config user.email '{{ git_user_email }}'"
        chdir: "{{ backup_dir }}"

    - name: Check if remote origin exists
      ansible.builtin.command:
        cmd: git remote get-url origin
        chdir: "{{ backup_dir }}"
      register: git_remote_check
      failed_when: false
      changed_when: false

    - name: Add remote origin if not exists
      ansible.builtin.command:
        cmd: "git remote add origin {{ backup_remote_url }}"
        chdir: "{{ backup_dir }}"
      when: git_remote_check.rc != 0

    - name: Update remote origin URL if it exists but differs
      ansible.builtin.command:
        cmd: "git remote set-url origin {{ backup_remote_url }}"
        chdir: "{{ backup_dir }}"
      when:
        - git_remote_check.rc == 0
        - git_remote_check.stdout != backup_remote_url

    - name: Create README if this is a new repository
      ansible.builtin.copy:
        content: |
          # MikroTik Router Configuration Backups

          This repository contains automated backups of MikroTik router configurations.

          ## About

          - Backups are created automatically using Ansible
          - Each `.rsc` file contains the complete configuration for one router
          - Files are overwritten on each backup to leverage git's version control
          - Git history shows all configuration changes over time

          ## Files

          Each backup file is named `<router-name>.rsc` and contains:
          - Router identification metadata (hostname, IP)
          - Backup timestamp
          - Complete RouterOS configuration in compact format

          ## Usage

          To restore a configuration to a router:
          1. Download the `.rsc` file for your router
          2. Upload to the router: `scp <router>.rsc admin@<router-ip>:/`
          3. Import on router: `/import file-name=<router>.rsc`

          **Warning**: Importing will overwrite the current configuration. Always backup current config first!
        dest: "{{ backup_dir }}/README.md"
        mode: '0644'
        force: no
      when: not git_dir.stat.exists

    - name: Add .gitignore file
      ansible.builtin.copy:
        content: |
          # Ansible temporary files
          *.retry
          .ansible/
        dest: "{{ backup_dir }}/.gitignore"
        mode: '0644'
        force: no

    - name: Add all backup files to git
      ansible.builtin.command:
        cmd: git add .
        chdir: "{{ backup_dir }}"

    - name: Check if there are changes to commit
      ansible.builtin.command:
        cmd: git status --porcelain
        chdir: "{{ backup_dir }}"
      register: git_status
      changed_when: false

    - name: Get detailed diff if changes detected (ignore timestamp lines)
      ansible.builtin.shell:
        cmd: |
          git diff --cached | grep -v '^[-+]# Last backup:' || true
        chdir: "{{ backup_dir }}"
      register: git_diff_filtered
      when: git_status.stdout != ""
      changed_when: false

    - name: Check if there are real changes (not just timestamps)
      ansible.builtin.set_fact:
        has_real_changes: "{{ git_diff_filtered.stdout | length > 0 }}"
      when: git_status.stdout != ""

    - name: Get diff stats for real changes
      ansible.builtin.command:
        cmd: git diff --cached --stat
        chdir: "{{ backup_dir }}"
      register: git_diff_stat
      when:
        - git_status.stdout != ""
        - has_real_changes | default(false)
      changed_when: false

    - name: Get full diff for changed routers
      ansible.builtin.command:
        cmd: git diff --cached
        chdir: "{{ backup_dir }}"
      register: git_diff_full
      when:
        - git_status.stdout != ""
        - has_real_changes | default(false)
      changed_when: false

    - name: Save change details to file for email notification
      ansible.builtin.copy:
        content: |
          Configuration Changes Detected
          ==============================
          Date: {{ ansible_date_time.iso8601 }}

          Changed Files:
          {{ git_status.stdout }}

          Summary:
          {{ git_diff_stat.stdout }}

          Detailed Changes (excluding timestamp updates):
          {{ git_diff_filtered.stdout }}
        dest: "{{ playbook_dir }}/logs/config-changes.txt"
        mode: '0644'
      when:
        - git_status.stdout != ""
        - has_real_changes | default(false)
        - hostvars['localhost']['notify_on_change'] | bool

    - name: Commit changes
      ansible.builtin.command:
        cmd: "git commit -m '{{ git_commit_message }}'"
        chdir: "{{ backup_dir }}"
      when: git_status.stdout != ""
      register: git_commit
      failed_when: git_commit.rc != 0

    - name: Check if upstream is configured
      ansible.builtin.command:
        cmd: git rev-parse --abbrev-ref --symbolic-full-name @{u}
        chdir: "{{ backup_dir }}"
      register: upstream_check
      failed_when: false
      changed_when: false
      when: git_status.stdout != ""

    - name: Push with upstream setup (first push or no upstream)
      ansible.builtin.command:
        cmd: "git push -u origin {{ backup_branch }}"
        chdir: "{{ backup_dir }}"
      when:
        - git_status.stdout != ""
        - upstream_check.rc != 0
      register: git_push_first
      failed_when: false

    - name: Display first push error if failed
      ansible.builtin.fail:
        msg: |
          Failed to push to remote repository!

          Error: {{ git_push_first.stderr }}

          Troubleshooting steps:
          1. Verify the remote URL is correct: {{ backup_remote_url }}
          2. Check that you have push access to the repository
          3. Ensure your SSH key is added to your git hosting service
          4. Test SSH access: ssh -T git@github.com (for GitHub)
          5. Check the backup repository exists on the remote

          Branch: {{ backup_branch }}
          Directory: {{ backup_dir }}
      when:
        - git_push_first is defined
        - git_push_first.rc is defined
        - git_push_first.rc != 0

    - name: Push changes to remote repository
      ansible.builtin.command:
        cmd: git push
        chdir: "{{ backup_dir }}"
      when:
        - git_status.stdout != ""
        - upstream_check.rc == 0
      register: git_push_regular
      failed_when: false

    - name: Display regular push error if failed
      ansible.builtin.fail:
        msg: |
          Failed to push to remote repository!

          Error: {{ git_push_regular.stderr }}

          Troubleshooting steps:
          1. Check network connectivity to {{ backup_remote_url }}
          2. Verify you have push access to the repository
          3. Pull any remote changes first: cd {{ backup_dir }} && git pull
          4. Check for conflicts or diverged branches

          Branch: {{ backup_branch }}
          Directory: {{ backup_dir }}
      when:
        - git_push_regular is defined
        - git_push_regular.rc is defined
        - git_push_regular.rc != 0

    - name: Display backup summary
      ansible.builtin.debug:
        msg: "{{ 'Changes committed and pushed to ' + backup_remote_url if git_status.stdout != '' else 'No changes detected - repository up to date' }}"
