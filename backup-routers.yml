---
- name: Backup MikroTik Router Configurations
  hosts: mikrotik_routers
  gather_facts: no

  vars:
    backup_dir: "{{ playbook_dir }}/backups"
    timestamp: "{{ ansible_date_time.iso8601_basic_short }}"
    git_commit_message: "Automated backup - {{ ansible_date_time.date }} {{ ansible_date_time.time }}"

  tasks:
    - name: Ensure backup directory exists
      ansible.builtin.file:
        path: "{{ backup_dir }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      run_once: true

    - name: Export router configuration
      community.routeros.command:
        commands:
          - /export compact
      register: config_output

    - name: Save configuration to local file
      ansible.builtin.copy:
        content: "{{ config_output.stdout[0] }}"
        dest: "{{ backup_dir }}/{{ backup_filename | default(inventory_hostname) }}.rsc"
        mode: '0644'
      delegate_to: localhost

    - name: Add timestamp comment to backup file
      ansible.builtin.lineinfile:
        path: "{{ backup_dir }}/{{ backup_filename | default(inventory_hostname) }}.rsc"
        line: "# Backup created: {{ ansible_date_time.iso8601 }} from {{ ansible_host }}"
        insertbefore: BOF
      delegate_to: localhost

- name: Commit and push changes to Git
  hosts: localhost
  gather_facts: yes
  connection: local

  vars:
    backup_dir: "{{ playbook_dir }}/backups"
    git_commit_message: "Automated backup - {{ ansible_date_time.date }} {{ ansible_date_time.time }}"

  tasks:
    - name: Check if backup directory is a git repository
      ansible.builtin.stat:
        path: "{{ backup_dir }}/.git"
      register: git_dir

    - name: Initialize git repository if not exists
      ansible.builtin.command:
        cmd: git init
        chdir: "{{ backup_dir }}"
      when: not git_dir.stat.exists

    - name: Add all backup files to git
      ansible.builtin.command:
        cmd: git add .
        chdir: "{{ backup_dir }}"

    - name: Check if there are changes to commit
      ansible.builtin.command:
        cmd: git status --porcelain
        chdir: "{{ backup_dir }}"
      register: git_status
      changed_when: false

    - name: Commit changes
      ansible.builtin.command:
        cmd: git commit -m "{{ git_commit_message }}"
        chdir: "{{ backup_dir }}"
      when: git_status.stdout != ""
      register: git_commit
      failed_when: git_commit.rc != 0

    - name: Push changes to remote repository
      ansible.builtin.command:
        cmd: git push
        chdir: "{{ backup_dir }}"
      when: git_status.stdout != ""
      register: git_push
      failed_when: git_push.rc != 0

    - name: Display backup summary
      ansible.builtin.debug:
        msg: "{{ 'Changes committed and pushed to repository' if git_status.stdout != '' else 'No changes detected - repository up to date' }}"
